{"version":3,"file":"static/js/129.a0657769.chunk.js","mappings":"kNAAaA,EAAe,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,SAAUC,EAAY,EAAZA,MACvC,OACE,0BACE,kBACEC,KAAK,OACLC,KAAK,cACLF,MAAOA,EACPD,SAAU,SAAAI,GAAC,OAAIJ,EAASI,EAAEC,OAAOJ,MAAtB,KAIlB,E,2BC+BD,EArCe,WAAO,IAAD,EACbK,GAAWC,EAAAA,EAAAA,MACjB,GAA4BC,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KAEMC,EAAM,UAAGF,EAAaG,IAAI,iBAApB,QAAiC,IAE7CC,EAAAA,EAAAA,YAAU,WACO,KAAXF,IAEJG,EAAAA,EAAAA,IAAaH,GACVI,KAAKR,GACLS,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAI,QAASF,EAAzB,GACf,GAAE,CAACN,IAMJ,OACE,6BACE,SAACf,EAAD,CAAcC,SANG,SAAAC,GACnBY,EAA0B,KAAVZ,EAAe,CAAEa,OAAQb,GAAU,CAAC,EACrD,EAIyCA,MAAOa,IAC5CL,EAAOc,OAAS,GAAgB,KAAXT,GACpB,wBACGL,EAAOe,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAP,OACV,yBACE,SAAC,KAAD,CAAMC,GAAE,UAAKF,GAAMG,MAAO,CAAEC,KAAMvB,GAAlC,SACGoB,KAFID,EADC,MAQZ,OAGT,C,uJCpCDK,EAAAA,GAAAA,SAAAA,QAAyB,+BAEzB,IAAMC,EAAS,CACbC,QALU,oCAaCC,EAAiB,mCAAG,oGACRH,EAAAA,GAAAA,IAAU,uBAAwB,CAAEC,OAAAA,IAD5B,cACzBG,EADyB,yBAExBA,EAASC,KAAKC,SAFU,2CAAH,qDAKjBnB,EAAY,mCAAG,WAAMoB,GAAN,gFACpBC,GADoB,kBACHP,GADG,IACKM,MAAAA,IADL,SAEHP,EAAAA,GAAAA,IAAU,gBAAiB,CAAEC,OAAQO,IAFlC,cAEpBJ,EAFoB,yBAInBA,EAASC,KAAKC,SAJK,2CAAH,sDAOZG,EAAY,mCAAG,WAAMd,GAAN,uFACHK,EAAAA,GAAAA,IAAA,iBAAoBL,GAAM,CAAEM,OAAAA,IADzB,cACpBG,EADoB,yBAGnBA,EAASC,MAHU,2CAAH,qD","sources":["components/SearchMovies/SearchMovies.jsx","pages/Movies.jsx","services/api-themoviedb.jsx"],"sourcesContent":["export const SearchMovies = ({ onChange, value }) => {\n  return (\n    <div>\n      <input\n        type=\"text\"\n        name=\"movies-name\"\n        value={value}\n        onChange={e => onChange(e.target.value)}\n      />\n    </div>\n  );\n};\n","import { useState, useEffect } from 'react';\nimport { SearchMovies } from 'components/SearchMovies/SearchMovies';\nimport { Link, useLocation, useSearchParams } from 'react-router-dom';\nimport { searchMovies } from 'services/api-themoviedb';\n\nconst Movies = () => {\n  const location = useLocation();\n  const [movies, setMovies] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const filter = searchParams.get('filter') ?? '';\n\n  useEffect(() => {\n    if (filter === '') return;\n\n    searchMovies(filter)\n      .then(setMovies)\n      .catch(error => console.log('Error', error));\n  }, [filter]);\n\n  const changeFilter = value => {\n    setSearchParams(value !== '' ? { filter: value } : {});\n  };\n\n  return (\n    <main>\n      <SearchMovies onChange={changeFilter} value={filter} />\n      {movies.length > 0 && filter !== '' ? (\n        <ul>\n          {movies.map(({ id, title }) => (\n            <li key={id}>\n              <Link to={`${id}`} state={{ from: location }}>\n                {title}\n              </Link>\n            </li>\n          ))}\n        </ul>\n      ) : null}\n    </main>\n  );\n};\n\nexport default Movies;\n","import axios from 'axios';\n\nconst KEY = 'e7f9efb80ccf0ba9ba4df2587d484fba';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nconst params = {\n  api_key: KEY,\n  //   q: query,\n  //   image_type: 'photo',\n  //   orientation: 'horizontal',\n  //   page: page,\n  //   per_page: 12,\n};\n\nexport const getTrendingMovies = async () => {\n  const response = await axios.get('/trending/movie/week', { params });\n  return response.data.results;\n};\n\nexport const searchMovies = async query => {\n  const allParams = { ...params, query };\n  const response = await axios.get('/search/movie', { params: allParams });\n\n  return response.data.results;\n};\n\nexport const getMovieById = async id => {\n  const response = await axios.get(`/movie/${id}`, { params });\n\n  return response.data;\n};\n"],"names":["SearchMovies","onChange","value","type","name","e","target","location","useLocation","useState","movies","setMovies","useSearchParams","searchParams","setSearchParams","filter","get","useEffect","searchMovies","then","catch","error","console","log","length","map","id","title","to","state","from","axios","params","api_key","getTrendingMovies","response","data","results","query","allParams","getMovieById"],"sourceRoot":""}